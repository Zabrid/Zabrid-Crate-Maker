# ###################################################################

# Zabrid's Crate Maker
# Source Code

# Feel free to change anything below this point.
# Although, beware you might break something!

# If you make a change and think that it should be pushed to the official script
# make a pull request on the GitHub https://github.com/Zabrid/Zabrid-Crate-Maker

# ###################################################################

function zcratemaker_genrandomstring(length: integer) :: text: # This is used to give items unique identifiers
    add "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9" and "10" to {_list::*}
    set {_return} to ""
    loop {_length} times:
        set {_return} to "%{_return}%%random element of {_list::*}%"
    return {_return}

function zcratemaker_bordergui(gui: inventory, rows: number, borderItem: item) :: inventory:
    set slot (numbers from 0 to 8) of {_gui} to {_borderItem}
    loop ({_rows} - 2) times:
        set slot (((loop-value) * 9), and ((loop-value) * 9) + 8) of {_gui} to {_borderItem}
    set slot (numbers from ({_rows} - 1) * 9 to (({_rows} - 1) * 9) + 8) of {_gui} to {_borderItem}
    return {_gui}

function zcratemaker_createcrate(name: text) :: boolean: # Will return true if worked, false if not
    if {zcratemaker::crates::%{_name}%} is set:
        return false
    set {zcratemaker::crates::%{_name}%} to {_name}

    # Crate GUI Stuff
    set {zcratemaker::crates::%{_name}%::guicrateshow} to false # Whether or not the crate will show up in /crates
    set {zcratemaker::crates::%{_name}%::guicrateitem} to ender chest
    set {zcratemaker::crates::%{_name}%::guicrateslot} to 0
    set {zcratemaker::crates::%{_name}%::guicratename} to "&6%{_name}% Crate"  # This is used for the GUI item
    set {zcratemaker::crates::%{_name}%::guicratelore} to "||&7Keys: &e{keys}||||&bLeft click to open this crate||&bRight click to preview this crate||&bMiddle click to open all keys."

    # Animations
    set {zcratemaker::crates::%{_name}%::animation} to "None"

    # Crate Key Stuff
    set {zcratemaker::crates::%{_name}%::cratekeyitem} to tripwire hook
    set {zcratemaker::crates::%{_name}%::cratekeyname} to "&6%{_name}% Key"
    set {zcratemaker::crates::%{_name}%::cratekeylore} to "&bRight click the %{_name}% crate to open."

    add 1 of stone shovel named "&eExample Item" with nbt "{zcratemaker-chance:1}" to {zcratemaker::crates::%{_name}%::items::*}

    return true

function zcratemaker_givekey(p: player, name: text, amt: integer):
    {zcratemaker::crates::%{_name}%} is set
    set {_uuid} to uuid of {_p}
    set {zcratemaker::crates::keys::%{_name}%::%{_uuid}%} to ( {zcratemaker::crates::keys::%{_name}%::%{_uuid}%} ? 0 ) + {_amt}

function zcratemaker_generatekey(name: text) :: item:
    {zcratemaker::crates::%{_name}%} is set
    set {_item} to 1 of {zcratemaker::crates::%{_name}%::cratekeyitem}
    set {_name1} to {zcratemaker::crates::%{_name}%::cratekeyname}
    set {_lore::*} to {zcratemaker::crates::%{_name}%::cratekeylore} split by "||"
    set {_item} to 1 of {_item} named {_name1} with lore {_lore::*} with nbt "{zcratemakerkey:""%{_name}%""}"
    return {_item}

function zcratemaker_deletecrate(name: text) :: boolean:
    if {zcratemaker::crates::%{_name}%} is not set:
        return false
    delete {zcratemaker::crates::%{_name}%::*} and {zcratemaker::crates::%{_name}%} and {zcratemaker::crates::%{_name}%::items::*} and {zcratemaker::crates::keys::%{_name}%::*}
    return true

function zcratemaker_formatbasicmessage(sender: text, t: objects) :: texts:
    replace all "{prefix}" in {_t::*} with "%zcratemaker_getconfig("prefix")%"
    replace all "{player}" in {_t::*} with {_sender}
    return {_t::*}

function zcratemaker_opencrate(p: player, name: text):# Thanks Sovde#0001 for the chance idea
    {zcratemaker::crates::%{_name}%} is set
    set {_maxchance} to 0
    loop {zcratemaker::crates::%{_name}%::items::*}:
        set {_nbt} to nbt compound of loop-value
        set {_minchance::%loop-index%} to {_maxchance}
        set {_chance} to "tag;zcratemaker-chance" tag of {_nbt}
        add {_chance} to {_maxchance}
        set {_maxchance::%loop-index%} to {_maxchance}
    set {_num} to a random number between 0 and {_maxchance}
    loop {zcratemaker::crates::%{_name}%::items::*}:
        {_num} is between {_minchance::%loop-index%} and {_maxchance::%loop-index%}

        set {_reward} to loop-value-1's name ? "%loop-value's type%"
        set {_crate} to {zcratemaker::crates::%{_name}%::guicratename}
        set {_prefix} to "%zcratemaker_getconfig("prefix")%"
        
        set {_nbt} to nbt compound of loop-value
        set {_command} to "tag;zcratemaker-command" tag of {_nbt}
        if {_command} is set:
            set {_commands::*} to {_command} split by "||"
            loop {_commands::*}:
                set {_cmd} to loop-value-2
                replace all "{player}" and "{p}" in {_cmd} with "%{_p}%"
                execute console command {_cmd}
        
        else: 
            set {_item} to loop-value-1
            set {_nbt} to nbt compound of loop-value
            delete tag "tag;zcratemaker-chance" of {_nbt}
            delete tag "tag;zcratemaker-id" of {_nbt}
            set {_item} to item from nbt {_nbt}
            add {_item} to {_p}'s inventory

        set {_message::*} to zcratemaker_getlang("reward")
        replace all "{prefix}" in {_message::*} with {_prefix}
        replace all "{reward}" in {_message::*} with {_reward}
        replace all "{crate}" in {_message::*} with {_crate}
        replace all "{player}" and "{p}" in {_message::*} with {_player}
        send formatted {_message::*} to {_p}
        stop

on right click:
    set {_nbt} to nbt compound of player's tool
    set {_key} to tag "tag;zcratemakerkey" of {_nbt}
    if {_key} is set:
        cancel event
    set {_tag} to {zcratemaker::cratelocations::%location of event-block%}
    {_tag} is set
    cancel event
    if {_tag} is "*":
        zcratemaker_gui_main(player)
        stop
    if {_key} is not {_tag}:

        set {_item} to {zcratemaker::crates::%{_tag}%::guicrateitem}
        set {_name} to {zcratemaker::crates::%{_tag}%::guicratename}
        set {_prefix} to "%zcratemaker_getconfig("prefix")%"

        set {_message::*} to zcratemaker_getlang("need-key")
        replace all "{prefix}" in {_message::*} with {_prefix}
        replace all "{crate}" in {_message::*} with {_name}
        replace all "{player}" and "{p}" in {_message::*} with "%player%"
        send formatted {_message::*} to player
        stop
    remove 1 of player's tool from player's inventory
    if {zcratemaker::crates::%{_tag}%::animation} is not set:
        zcratemaker_opencrate(player, {_tag})
    else if {zcratemaker::crates::%{_tag}%::animation} is "None":
        zcratemaker_opencrate(player, {_tag})
    else if {zcratemaker::crates::%{_tag}%::animation} is "CSGO":
        zcratemaker_animations_csgo(player, {_tag}, "%zcratemaker_getconfig("animations [csgo] [direction]")%")
    else if {zcratemaker::crates::%{_tag}%::animation} is "Lightning":
        zcratemaker_animations_lightning(player, {_tag})
    else if {zcratemaker::crates::%{_tag}%::animation} is "Soul":
        zcratemaker_animations_soul(player, {_tag})

on left click:
    set {_tag} to {zcratemaker::cratelocations::%location of event-block%}
    {_tag} is set
    if player has permission "zcratemaker.setcrate":
        player is sneaking
        delete {zcratemaker::cratelocations::%location of event-block%}
        set {_break} to true
    {_break} is not set
    cancel event
    if {_tag} is "*":
        zcratemaker_gui_main(player)
        stop
    zcratemaker_gui_preview(player, {_tag}, "null")